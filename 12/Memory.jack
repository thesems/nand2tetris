// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, freeList;
    static int heap, length, next;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let heap = 2048;
        let length = 0;
        let next = 1;
        let freeList[length] = 14335;
        let freeList[next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prevBlock, block, nextBlock;
        
        let prevBlock = null;
        let block = freeList;

        // Search for a free memory block
        while (block[length] < size) {
            let prevBlock = block;
            let block = block[next];

            if (block = null) {
                // could not find a free memory block
                return -1;
            }
        }

        // Create new the next block
        let nextBlock = block + 2 + size;
        let nextBlock[length] = block[length] - size - 2;
        let nextBlock[next] = block[next];

        // Update block's size and next
        let block[length] = size;
        let block[next] = null;

        if (prevBlock = 0) {
            let freeList = nextBlock;
        } else {
            let prevBlock[next] = nextBlock;
        }

        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = o - 2;
        let block[next] = freeList;
        let freeList = block;
        return;
    }    
}
