class Game {
    field int points;
    field bool alive;
    field Snake snake;
    field Item item;
    field String textPoints;
    field String textTitle;
    field String textHelp;
    field String textLost;
    field int direction;

    constructor Game new() {
        var int i;

        let points = 0;
        let alive = true;
        let snake = Snake.new(30, 30, 5, 5);
        let item = Item.new(150, 150, 2, 2);
        let textPoints = "Points: ";
        let textTitle = "SNAKE";
        let textHelp = "<space> - restart";
        let textLost = "YOU LOST!";
        return this;
    }

    method void dispose() {
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void reset() {
        let points = 0;
        let alive = true;
        let direction = 4;
        do snake.reset(30, 30, 5, 5);
        do item.reset(150, 150);
        return;
    }

    method void run() {
        var int i;
        var char key;
        var bool pressed;
        var bool hit;
        var int updateTime;
        var int x;
        var int y;
        var Random randX;
        var Random randY;

        let direction = 4;
        let randX = Random.new(11, 31, 1, 511);
        let randY = Random.new(9, 31, 1, 255);

        while (true) {
            let key = Keyboard.keyPressed();

            if  (key = 81) { let alive = false; } // q
            if  (key = 32) { do reset(); } // space
            if  (key = 131) { let direction = 0; } // up arrow
            if  (key = 133) { let direction = 1; } // down arrow
            if  (key = 130) { let direction = 2; } // left arrow
            if  (key = 132) { let direction = 3; } // right arrow

            do drawPoints();
            if (alive) {
                do item.draw();
                if (updateTime > 100) {
                    do snake.update(direction);
                    let updateTime = 0;

                    let hit = snake.ateItself();
                    if (hit) {
                        let alive = false;
                    }
                }
                do snake.draw();

                let hit = snake.intersect(item.getBoundingBox());
                if (hit) {
                    let points = points + 1;
                    let x = randX.getRandomInt(5, 501);
                    let y = randY.getRandomInt(20, 245);
                    do item.reset(x, y);
                    do snake.grow();
                }

                let updateTime = updateTime + 25;
                do Sys.wait(25);
                do Screen.clearScreen();
            }
            if (~alive) {
                do Output.moveCursor(11, 27);
                do Output.printString(textLost);
            }
        }

        return;
    }

    method void drawPoints() {
        do Output.moveCursor(0, 2);
        do Output.printString(textPoints);
        do Output.printInt(points);
        do Output.moveCursor(0, 27);
        do Output.printString(textTitle);
        do Output.moveCursor(0, 45);
        do Output.printString(textHelp);
        do Screen.drawLine(10, 15, 501, 15);
        return;
    }
}
