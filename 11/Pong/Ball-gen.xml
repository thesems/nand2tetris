<class>
<keyword> class </keyword>
<identifier> Ball </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
lengthy
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
3
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
straightD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
5
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
diagonalD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
6
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> boolean </keyword>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
positivex
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
8
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
positivey
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
9
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier>
<name>
leftWall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
10
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
rightWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
11
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
topWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
12
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
bottomWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
13
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<classVarDec>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> constructor </keyword>
<identifier> Ball </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier>
<name>
Ax
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
0
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
Ay
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
AleftWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
ArightWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
3
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
AtopWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
4
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
AbottomWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
5
</index>
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
Ax
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
Ay
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
leftWall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
10
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
AleftWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
rightWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
11
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
ArightWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
3
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
topWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
12
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
AtopWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
4
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
bottomWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
13
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
AbottomWall
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
5
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 6 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> this </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> true </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<keyword> false </keyword>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<doStatement>
<keyword> do </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> draw </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getLeft </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getRight </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier>
<name>
destx
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier>
<name>
desty
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
temp
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
destx
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
lengthy
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
3
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
desty
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier> Math </identifier>
<symbol> . </symbol>
<identifier> abs </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<name>
lengthy
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
3
</index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
temp
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
temp
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
positivex
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
8
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
desty
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
positivey
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
9
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
destx
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
positivex
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
8
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
destx
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
positivey
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
9
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
desty
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> - </symbol>
<term>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
straightD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
5
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
diagonalD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
6
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
dy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<identifier>
<name>
dx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> move </identifier>
<symbol> ( </symbol>
<parameterList>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<statements>
<doStatement>
<keyword> do </keyword>
<identifier> hide </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier>
<name>
straightD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
5
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
d
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
4
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<identifier>
<name>
diagonalD
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
6
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
positivey
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
9
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
positivex
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
8
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
invert
</name>
<typ>
boolean
</typ>
<kind>
field
</kind>
<index>
7
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> - </symbol>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier>
<name>
leftWall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
10
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
leftWall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
10
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
rightWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
11
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
rightWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
11
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> &gt; </symbol>
<term>
<identifier>
<name>
topWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
12
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
topWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
12
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<identifier>
<name>
bottomWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
13
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 4 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
bottomWall
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
13
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> show </identifier>
<symbol> ( </symbol>
<expressionList>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<expression>
<term>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<subroutineDec>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> bounce </identifier>
<symbol> ( </symbol>
<parameterList>
<keyword> int </keyword>
<identifier>
<name>
bouncingDirection
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</parameterList>
<symbol> ) </symbol>
<subroutineBody>
<symbol> { </symbol>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
<symbol> , </symbol>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
<symbol> ; </symbol>
</varDec>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
lengthy
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
3
</index>
</identifier>
</term>
<symbol> / </symbol>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
bouncingDirection
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 10 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ~ </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
bouncingDirection
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> | </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
lengthx
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> &lt; </symbol>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> &amp; </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
bouncingDirection
</name>
<typ>
int
</typ>
<kind>
arg
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 20 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 5 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 1 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 506 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 50 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
y
</name>
<typ>
,
</typ>
<kind>
field
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
wall
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
14
</index>
</identifier>
</term>
<symbol> = </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 250 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<symbol> - </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 0 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
divLengthx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
2
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<integerConstant> 25 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
</term>
<symbol> / </symbol>
<term>
<identifier>
<name>
divLengthy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
3
</index>
</identifier>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<letStatement>
<keyword> let </keyword>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
<symbol> = </symbol>
<expression>
<term>
<identifier>
<name>
x
</name>
<typ>
int
</typ>
<kind>
field
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> + </symbol>
<term>
<symbol> ( </symbol>
<expression>
<term>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
<symbol> * </symbol>
<term>
<identifier>
<name>
factor
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
4
</index>
</identifier>
</term>
</expression>
<symbol> ) </symbol>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
</statements>
<symbol> } </symbol>
</ifStatement>
<doStatement>
<keyword> do </keyword>
<identifier> setDestination </identifier>
<symbol> ( </symbol>
<expressionList>
<expression>
<term>
<identifier>
<name>
newx
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
0
</index>
</identifier>
</term>
</expression>
<symbol> , </symbol>
<expression>
<term>
<identifier>
<name>
newy
</name>
<typ>
int
</typ>
<kind>
var
</kind>
<index>
1
</index>
</identifier>
</term>
</expression>
</expressionList>
<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
</statements>
<symbol> } </symbol>
</subroutineBody>
</subroutineDec>
<symbol> } </symbol>
</class>
